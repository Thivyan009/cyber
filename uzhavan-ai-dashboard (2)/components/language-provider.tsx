"use client"

import type React from "react"

import { createContext, useContext, useEffect, useState } from "react"

type Language = {
  code: string
  name: string
  flag: string
}

export const languages: Language[] = [
  { code: "en", name: "English", flag: "ЁЯЗмЁЯЗз" },
  { code: "ta", name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "te", name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
  { code: "kn", name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
]

type LanguageProviderProps = {
  children: React.ReactNode
  defaultLanguage?: string
}

type LanguageContextType = {
  language: Language
  setLanguage: (code: string) => void
  getTranslation: (key: string) => string
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children, defaultLanguage = "en" }: LanguageProviderProps) {
  const [language, setLanguageState] = useState<Language>(
    languages.find((lang) => lang.code === defaultLanguage) || languages[0],
  )

  useEffect(() => {
    // Load saved language preference from localStorage
    const savedLanguage = localStorage.getItem("language")
    if (savedLanguage) {
      const lang = languages.find((l) => l.code === savedLanguage)
      if (lang) {
        setLanguageState(lang)
      }
    }
  }, [])

  const setLanguage = (code: string) => {
    const newLanguage = languages.find((lang) => lang.code === code)
    if (newLanguage) {
      setLanguageState(newLanguage)
      localStorage.setItem("language", code)
      document.documentElement.lang = code
    }
  }

  // Simple translation function - in a real app, this would be more sophisticated
  const getTranslation = (key: string): string => {
    const translations: Record<string, Record<string, string>> = {
      welcome: {
        en: "Welcome",
        ta: "ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
        hi: "рд╕реНрд╡рд╛рдЧрдд рд╣реЗ",
        te: "р░╕р▒Нр░╡р░╛р░Чр░др░В",
        kn: "р▓╕р│Нр▓╡р▓╛р▓Чр▓д",
      },
      login: {
        en: "Login",
        ta: "роЙро│рпНроирпБро┤рпИроп",
        hi: "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ",
        te: "р░▓р░╛р░Чр░┐р░ир▒Н",
        kn: "р▓▓р▓╛р▓Чр▓┐р▓ир│Н",
      },
      register: {
        en: "Register",
        ta: "рокродро┐ро╡рпБ роЪрпЖропрпНроп",
        hi: "рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ",
        te: "р░ир░ор▒Лр░жр▒Б",
        kn: "р▓ир│Лр▓Вр▓жр▓гр▓┐",
      },
      dashboard: {
        en: "Dashboard",
        ta: "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
        hi: "рдбреИрд╢рдмреЛрд░реНрдб",
        te: "р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н",
        kn: "р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│Н",
      },
      weather: {
        en: "Weather Forecast",
        ta: "ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ",
        hi: "рдореМрд╕рдо рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        te: "р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и",
        kn: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж",
      },
      market: {
        en: "Market Prices",
        ta: "роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН",
        hi: "рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп",
        te: "р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б",
        kn: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б",
      },
      suggestions: {
        en: "Smart Suggestions",
        ta: "ро╕рпНрооро╛ро░рпНроЯрпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
        hi: "рд╕реНрдорд╛рд░реНрдЯ рд╕реБрдЭрд╛рд╡",
        te: "р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╕р▒Вр░Ър░ир░▓р▒Б",
        kn: "р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б",
      },
      settings: {
        en: "Settings",
        ta: "роЕроорпИрокрпНрокрпБроХро│рпН",
        hi: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        te: "р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р▒Б",
        kn: "р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р│Б",
      },
      logout: {
        en: "Log out",
        ta: "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
        hi: "рд▓реЙрдЧ рдЖрдЙрдЯ",
        te: "р░▓р░╛р░Чр▒Н р░Ер░╡р▒Бр░Яр▒Н",
        kn: "р▓▓р▓╛р▓Чр│Н р▓Фр▓Яр│Н",
      },
    }

    return translations[key]?.[language.code] || key
  }

  return (
    <LanguageContext.Provider value={{ language, setLanguage, getTranslation }}>{children}</LanguageContext.Provider>
  )
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
